C/S   client/server:
特点：1.使用前必须安装
      2.服务器和客户端同时更新
	  3.C/S架构的软件不能跨平台使用
	  4.C/S架构的软件客户端和服务器通信采用的是自有协议，相对比较安全
B/S   browser/server
      1.本质上也是C/S，只不过将浏览器当作软件的客户端
	  2.B/S架构软件通过使用浏览器访问页面的形式，来使用软件
	  3.如：京东，淘宝，知乎
	  
根据W3C标准，网页由结构、表现、行为构成：	  
结构：HTML用于描述页面的结构
表现：CSS用于控制页面中的元素样式
行为：JS用于响应用户操作
h1重要性仅次于title

自结束标签 <br/> <hr/> <meta/> <img/> <link /> <input/>

header -表示网页的头部
main - 表示网页的主体部分
footer - 表示网页的底部
nav - 表示网页的的导航
aside - 和主体相关的其他内容（侧边栏）
article - 表示一个独立的文章
section - 表示一个独立的区块，上边的标签都不能表示时用。

 图片格式
				       JPEG
					       -支持的颜色比较多，图片可以压缩，但不支持透明
						   -一般JEPG用来保存照片等颜色丰富的图片
					   GIF
					       -支持的颜色少，只支持简单的透明，支持动态图
						   -图片颜色单一或是动态图用GIF
					   PNG
					       -支持的颜色多，且支持复杂的透明
						   -可以用来显示颜色复杂的透明的图
					   webp
					       - 这种格式是谷歌新推出的专门用来表示网页中图片的一种格式
						   - 它具备其他图片所有优点，而且文件还小
						   - 缺点:兼容性极差
					   base64
					       - 将图片使用base64编码，这样可以将图片转换为字符，通过字符形式引入图片
						   - 一般都是一些需要和网页一起加载的图片才会使用base64
						 
                1.HTML中不区分大小写，我们一般用小写
				2.HTML中的注释不能嵌套
				3.HTML标签结构必须完整
				4.HTML标签可以嵌套但不可以交叉嵌套

url  uniform resource locate
src  source
href hypertext reference


<meta http-equive = 'refresh' content = '5,'http://xx''   />   //几秒后自动跳转页面
<a href = '#'> </a>    //超链接
<iframe src = 'http://xx'> </iframe> //内联框架
超链接可以在内联框架内跳转（通过设置target值与name值相等）

audio 标签用来向页面引入一个外部的音频文件（视频则用video）
                音频文件引入时，默认情况下不允许用户控制播放停止
                属性：
                    controls 是否运用用户控制播放
                    autoplay 音频文件是否自动播放
                    loop 会自动循环播放					
					    - 如果设置了autoplay 则音乐在打开页面时会自动播放
embed可以替代audio 解决在IE老版本中无法显示的问题。

-----------------------------------------------------------------------------------------------

内联样式：
可以将CSS样式编写到元素（标签）的style属性中 	
                将样式直接编写到style属性中，这种样式我们称为内联样式		
                内联样子只对当前元素中的内容其作用，所以不方便重复使用
                内联样式属于结构与表现耦合，不方便后期维护，不推荐！	 
				
				
内部样式表：
	       也可以将CSS样式编写到head中的style标签里
			     将样式表编写的style标签中，然后通过css选择器选中指定元素
				    然后可以同时为这些元素一起设置样式，这样可以使样式进一步复用
				 将样式表编写到style标签中，也可以使表现和结构进一步分离，它也是我们推荐的使用方式。
              <style type = 'text/css'>
                    p{
                       color:red ;
                       font-size:30px;
                           
                     }

              </style>
				 
				 
外部css样式表：
           还可以将样式表编写到外部的css文件中，再通过link标签将外部的css文件引入到当前页面中，
               这样外部文件中的css式样将会应用到当前页面中。			  
			   将css样式同一编写到外部的样式表中，完全使结构和样式分离，可以使样式表可以在不同页面中使用，
			   最大限度的使样式可以进行复用，将样式统一写在样式表中，然后通过link标签引入，可以利用浏览器
			   的缓存，加快用户访问的速度，提高了用户体验。所以开发中，最推荐使用就是外部的css文件。
<link rel = 'stylesheet' type= 'text/css' href = 'css.css'/>
			   
			   
			   
css的注释，作用与html注释类似，只不过必须写在style中，或是css文件中
                
选择器 声明块
                 选择器：
                        - 通过选择器可以选中页面中的指定元素，并且将声明块中的样式应用到选择器对应的元素上。
                 声明块：
                        - 声明块紧跟在选择器的后边，使用{}括起来，
                           声明块实际上就是一组一组的名值对结构，
                          	这一组一组的名值对我们称为声明
                            多个声明用 ； 分割，声明的样式名和样式值间用 ： 连接
							

块元素和内联元素
              div是一个块元素
                所谓块元素就是会独占一行的元素,无论内容多少，
                   都会独占一整行。
                p h1 h2 h3 br blockquote ul/li
                div标签没有任何语义，就是一个纯粹的块元素
                  并且不会为它的元素设置任何默认样式，
                div元素主要用来布局
              span是一个内联元素
                所谓的行内元素，指的是只占自身大小的元素，不会占用一整行。
                常见的内联元素：
                  a img iframe span
                span没有任何语义，span标签专门用来选择文字，然后为文字设置样式。
              块元素只用来布局，内联元素用来选择文本，设置文本样式。
                  一般情况下用块元素去包含内联元素。
                  a元素可以包含任意元素,除了它本身。
                  p元素不可以包含任何其他块元素。
				  
				  
 *元素选择器
                 *  作用：通过元素选择器可以选择页面中所以指定的元素
                 *   语言：标签名{}
				 
*id 选择器
                 *  - 通过元素 id 属性值唯一选择一个元素
                 * - 语法：
                 *       #id属性值{}
						 
* 类选择器
              *     - 通过元素的class属性值选一组属性
              *     - 语法：
              *     - .class属性值{}
			  *      我们可以为元素设置class属性
              *      class属性和id属性类似，只不过class属性可以重复
              *      可以为同一个元素设置多个class属性值，多个值之间用空格隔开
			  
			  
 * 选择器分组(并集选择器)
       *      - 通过选择器分组可以同时选择多个选择器对应的元素
       *      - 语法：选择器1，选择器2，选择器N{}
 * 通配选择器
              * - 它可以用来选择页面中所有元素
			  * - 语法： *{}

 *复合选择器（交集选择器）
      * -作用：
	          - 可以选中同时满足多个选择器的元素
	  * -语法：
	          - 选择器1选择器选择器N{}
			  
			  
*元素之间的关系   
                    父元素：直接包含子元素的元素 
                    子元素：直接被父元素包含的元素
                    祖先元素：直接或间接包含后代元素的元素
                    后代元素：直接或间接被祖先元素包含的元素
                    兄弟元素：拥有相同父元素的元素叫兄弟元素
					
*后代元素选择器
                  *- 作用：
				     * - 选择指定元素的指定后代元素
				  *- 语法：
                     * - 祖先元素 后代元素{}				  
*子元素选择器
                  * - 作用：
				      * - 选中指定父元素的指定子元素
                  * - 语法：
				      * - 父元素 > 子元素
IE6一下不兼容子元素选择器、



*伪类专门用来表示元素的一种特色状态(link,visited,hover,active)
              *   比如： 访问过的超链接，比如普通的超链接，比如获取焦点的文本框
              *当我需要为处在这些特色状态的元素设置样式时，就可以使用伪类
              *浏览器是通过历史记录判断一个链接是否访问过
              *   因涉及用户隐私，所以使用visited伪类只能设置字体的颜色，不能设置如字体大小、背景颜色问题！！！
              *hover和active也可以为其他元素设置
              * IE6中，不支持对超链接外的元素设置状态。 
			  
*使用伪元素表示元素中的一些特殊位置(first-letter,first-line,afer等)

*属性选择器：
   * - 作用： 可以根据元素中的属性或属性值选取指定元素
   * - 语法：
        *   [属性名] 选取含有指定属性的元素
		*	[属性名 = '属性值'] 选取含有指定属性值的元素
        *   [属性名^ = '属性值'] 选取以属性值开头的元素 
		*   [属性名$ = '属性值'] 选取以属性值结尾的元素
		*   [属性名* = '属性值'] 选择包含属性值的元素


*子元素的伪类：
       * - :first(last)-child 可以选中第一个子元素
	   * - ：nth-child(第任意个) 可以选中任意位置子元素（even：为偶数，odd：为奇数）
	   * - ：first-of(last-of)(nth-of)-type 当前类型元素中的第一个
	 
*兄弟元素选择器：
       * - 作用：可以选中一个元素后紧挨着的指定的兄弟元素
	   * - 语法： 前一个 + 后一个（span + p）
	   * - 作用： 选中后边所有兄弟元素
	   * - 语法： 前一个 ~ 后一个(span ~ p)
	   
*否定伪类选择器：
       * - 作用：可以从已选中的元素剔除某些元素
	   * - 语法：
	              ：not（选择器）





*像儿子可以继承父亲的遗产一样，在css中，祖先元素上的样式，也会被他后代继承。
*利用继承，可以将一些基本样式设置给祖先元素，这样所有的后代元素将会自动继承这些样式。
                   
****但不是所有样式都被子元素继承，比如背景相关的样式都不会被继承、边框相关的样式、定位相关的



*当使用不同的选择器，选中同一个元素时并且设置相同的样式时，
                   *  这时样式这件发生了冲突，最终哪个选择器，由选中器优先级决定
                   *  优先级高的优先选择
                   *优先级规则：
                   *          内联样式，优先级1000        
                   *          id选择器，优先级100
                   *          类和伪类，优先级10
                   *          元素选择器，优先级1
                   *          通配*，优先级0     
                   *          继承的样式，没有优先级
                   *当包含多种选择器使用，需要将优先级相加再比较
                   *   注意：选择器优先级计算不会超过他的最大数量级；
                   *         如果选择器优先级一样，则用靠后的
                   *   并集选择器的优先级是单独计算
                   *   可以在样式后面加 ！improtant，则此时该样式优先级最高！！！
-------------------------------------------------------------------------------------------------------------------------------------------


em和strong  
- 这两个标签都是强调一个内容
   em是语气上的强调,em浏览器中默认使用斜体显示。
   strong强调一个内容，比em更强烈，默认使用粗体显示。
i和b
   - 两个标签都没有语义。
   - 单纯的表示斜体和强调
small
   - 标签中的内容会比他父元素的文字中小一些
        h5中使用small标签表示一些细则一类的内容
        如：合同中小字，网站的版权声明都可以放small
cite - 网页中所有加书名号的内容都可以使用cite标签，表示参考内容
q - 表示一个短的引用，浏览器会默认加上引号
blockquote - 标签表示一个长引用（块元素）
sup - 设置上标签
sub - 设置下标签
del - 表示一个删除的内容，标签中内容会自动添加删除线
ins - 表示插入一个内容，ins中的内容会自动添加下划线
pre - 是一个预格式标签，会将代码中的格式保存，不会忽略多个空格
code - 专门表示代码
我们一般结合使用pre和code来表示一段代码		


列表相当于去超市购物时的那个购物清单
                        在HTML也可以创建列表，在网页中一共由三种列表
                             1.无序列表
                             2.有序列表
                             3.定义列表
                  无序列表
                        - 使用ul标签来创建一个无序列表
                        - 使用li在ul中创建一个一个的列表项
                             一个li就是一个列表项
                  注意：一般默认的项目符号都不行
                  采用css去掉项目符号。（list-style ：none；）
                  需要使用则采取加图片的方式

                  有序列表和无序列表类似，用ol代替ul
                  有序列表使用有序序号，作为项目符号
                  type属性，可以指定序号的类型
                       可选值：1，默认值，使用阿拉伯数字
                                 a/A 采用小写或大写字母做序号
                                 i/I 采用小写或大写罗马数字做序号
                  列表之间都可以相互嵌套

                  定义列表 
                          - 对一些词汇或内容进行定义
                          - 使用dl创建一个定义列表
                                dl中有两个子标签（dt dd）
                                   dt：被定义内容
                                   dd：对定义内容的描述
同样 dl ul ol 都可以相互嵌套


单位em
      - em和百分比类似，他是相对于当前元素的字体大小计算的
	  - 1 em = 1 font-size
单位rem
      - 相对于根元素字体大小计算
HSLA(HSL)
    H 色相(0-360) S 饱和度(0-100)  L 亮度(0-100) a 透明度
	
字体的样式
           - font-size 
		       设置文字的大小，浏览器中一般默认为16px
			   font-size设置的并不是文字本身的大小
			      在页面中，每个文字都处在一个看不见的框中
				  我们设置的font-size实际上都是设置框的高度，并不是字体大小
				  一般情况下文字都比框小，有时也会大
				  根据字体的不同，显示效果不同
				  
				  

文档流（normal flow）
                 - 网页是一个多层的结构，一层叠着一层
                 - 通过css可以分别为每一层设置样式
                 - 这些层中，最底下的一层称为文档流，文档流是网页基础
                      我们创建的元素默认都是在文档流进行排列
                 - 对着我们来说元素主要有两个状态
                      在文档流中
                      不在文档流中（脱离文档流）
                 - 元素在文档流中有什么特点：
                      - 块元素
                          - 块元素独占一行
                          - 默认宽度是父元素的全部（会把父元素撑满）
                          - 默认高度是被内容撑开（子元素）
                      - 行内元素
                        - 行内元素不会独占一行，只占自身大小
                        - 行内元素在页面中左向右水平排列，一行中不能容纳下
                            所有元素，则会自动换行，自左向右排列。
                        - 行内元素默认宽度和高度都是被内容撑开。				  


内容区（content），元素中的所有子元素和文本内容都在内容区排列
                   内容区大小由weight和height两个属性设置
边框（border），边框属于盒子边缘，边框里属于盒子内部，出了则不是。
                   边框大小会影响整个盒子大小
                       需设置三个样式：
                            边框宽度 border-width(四个值时顺序为：上右下左)
                            边框颜色 border-color
                            边框样式 bordet-style
border(-left等)可以简写属性，且没有顺序要求如： solid 10px orange

内边距（padding）：
                          - 内容区和边框之间的距离是内边距
                          - 一共有四个方向的内边距
                              padding-top（right，bottom，left）
                          - 内边距的设置会影响到盒子的大小
                          - 背景颜色会延伸到内边距上
                         一个盒子的可见框大小由 内容区 内边框 和 边框 共同决定，
                            所以在计算盒子大小时，需要将这三个区域加到一起计算。
padding内边距的简写属性，可以同时指定四个方向内边距规则和border一样

外边距（margin）
                             - 外边距不会影响盒子可见框大小
                             - 但外边距会影响盒子的位置
                             - 一共有四个方向的外边距：
                                  margin-top(bottom,right,left)
                                  上外边距，设置一个正值，元素会往下移动
                                  左外边距，设置一个正值，元素会往下右移
                             - margin也可以设置负值，元素往相反方向移动。
                             - 元素在页面中按自左向右顺序排列，
                                所以默认情况下如果我们设置的左和上外边距会移动元素自身
                                而设置下和右外边距会移动其他元素
                             - margin也可以设置简写属性与border类似。
水平方向的布局，
                                    元素在其父元素水平方向的位置由以下几个属性共同决定
                                        margin-left
                                        border-left
                                        padding-left
                                        width
                                        padding-right
                                        border-right
                                        margin-right
                                   一个元素在其父元素中，水平布局必须要满足一下等式
margin-left+ border-left+padding-left+width+padding-right+ border-right+ margin-right
                                   = 父元素内容区在的宽度
                                   - 以上等式必须满足，若相加不成立，则称为过度约束，等式会自动调整
                                      - 调整情况
                                         - 如果七个值中没有 auto情况，浏览器会调整margin-right值。
                                      - 这七个值里有3个可以设为auto
                                          width，margin-left，margin-rigth
                                            -如果某个值为auto，则自动调整auto那个值使等式成立。
                                      - width默认值就是auto
                                      - 如果将一个宽度一个外边距设置为auto，则宽度会调到最大，另一个为0。
                                      - 如果将两个外边距设置为auto，则将外边距设置为相同值。
                                          我们经常利用这个特点，使得子元素在父元素中水平居中。
                                          实例：
                                             width：xxx px；
                                             margin：0 auto；

垂直方向的布局:
                           - 默认情况下父元素的高度被内容撑开
                        子元素是在父元素的内容区中排列的：
                            如果子元素超过了父元素，则子元素会从父元素中溢出。
                            使用overflow属性来设置父元素如何处理溢出的子元素。
                              可选值： 
                                visible ：默认值，可以溢出并且显示
                                hidden：溢出内容将被裁剪不会显示
                                scroll：生成两个滚动条，通过滚动条查看完整的一个内容
                                auto：根据需要生成滚动条。
                            overflow-x：单独处理水平方向
                            overflow-y：单独处理垂直方向

垂直外边距的重叠（折叠）
                      - 相邻的垂直方向外边距会发生重叠现象
                      - 兄弟元素
                         - 兄弟元素间的相邻垂直外边距会取两者间较大值（两者都是正值）
                         - 特殊情况，
                             如果相邻的外边距 一正一负，则取两者和
                             如果两个都是负，则取两者绝对值较大者
                         - 兄弟元素之间的外边距重叠，对开发是有利的，所以不用管。
                      -父子元素
                         - 父子元素间相邻外边距，子元素的会传递给外边距（上外边距）
                         - 父子外边距的折叠，会影响布局，必须处理。
                              父元素中加 border-top: xxpx ;
							  

行内元素的盒模型：
                         - 行内元素不支持设置宽度和高度
                         - 行内元素可以设置padding，但是垂直方向padding不会影响页面布局
                         - 行内元素可以设置border（margin），垂直方向上也不会影响页面布局
                         - 
                     display 用来设置元素显示的类型
                         - 可选值： 
                             - inline 将元素设置为行内元素
                             - block 将元素设置为块元素
                             - inline-block 将元素设置为行内块元素
                                  - 既可以设置宽度和高度，又不会独占一行。
                             - table 将元素设置为一个表格
                             - none 元素不在页面显示
                     visibility 用来设置元素的显示状态
                         - 可选值
                            - visible 默认值，元素在页面上正常显示
                            - hidden 元素在页面上隐藏，不显示,但是依然占据页面的位置



box-sizing 调整盒子可见内容组成
                   可选值
				      - content-box 默认值 ，宽度和高度设置内容区的大小
					  - border-box 宽度和高度设置整个盒子大小
box-shadow 用来设置元素的阴影效果，阴影不会影响布局 (box-shadow:0px 0px 100px 0.8;) 
                   第一个值 水平偏移量 设置阴影水平的位置 正值往右移动 负值相反
				   第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值相反
				   第三个值 阴影的模糊半径
				   第四个值 阴影的颜色

out-line 用来设置元素的轮廓线，用法和border一摸一样，轮廓和边框不同的点，就是轮廓不会影响可见框大小。

border-radius 用来设置圆角半径
                   border-top(bottom)-left(right)-radius
				   
浮动：太多了 不补了。。。(浮动后的元素，不再区分 块元素和内联元素 ； 浮动后的元素不会盖在文字上，只会环绕文字)



高度塌陷问题：
               在浮动布局中，父元素高度默认是被子元素撑开的， 
                   当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离
                   将会无法撑起父元素的高度，导致父元素高度丢失。
                 父元素高度丢失后，其下的元素会上移，导致页面布局混乱！
                 所以高度塌陷是浮动布局比较常见的问题，必须处理。
            BFC(Block Formatting Context) 块级格式化环境
                -BFC是一个CSS中的隐含属性，可以为一个元素开启BFC
                   开启BFC元素会变成一个独立的布局区域。
                - 元素开启BFC后的特点：
                   1. 开启BFC元素 不会被浮动元素覆盖
                   2. 开启BFC元素 子元素和父元素外边距不会重叠
                   3. 开启BFC元素 可以包含浮动子元素！！
                - 可以通过一些特殊方式来开启元素的BFC
                   1. 设置元素的浮动(不推荐)
                   2. 将元素设为行内块元素（不推荐）
                   3. 将元素的overflow设置为一个非visible的值
                       - 常用方式 为元素设置 overflow： hidden或auto 使其可以包含浮动元素

clear属性可以清除 浮动元素对当前元素产生的影响
             可选值： 
                - left 清除左侧浮动对当前元素的影响
                - right 清除右侧浮动对当前元素的影响
                - both 清除两侧中最大影响那侧
             原理：
                - 设置清除浮动后，浏览器会自动为元素添加一个上外边距
                    以使其位置不受其他元素影响
					
高度塌陷最终解决方案：
      .box1::after{
           content:  '';
           clear: both;
           display: block;}
		   
clearfix 可以同时解决高度塌陷和外边距重叠
                  .clearfix::before,
                  .clearfix::after{
                      content:'';
                      display:table;
                      clear:both;}
					  
					  
定位(position)
              - 定位是一种更高级的布局手段
              - 通过定位可以把元素摆放到页面的任意位置
              - 使用position属性设置定位
                 可选值：
                      - static   默认值 元素是静止的 没有开启定位
                      - relative 开启元素的相对定位
                      - absolute 开启元素的绝对定位
                      - fixed    开启元素的固定定位
                      - sticky   开启元素的粘滞定位
        - 相对定位：
                      - 当元素position属性值设置为relative时则开启了元素的相对定位
                      - 相对定位的特点：
                           1. 元素开启相对定位后，如果不设置偏移量元素不会发生任何的变化。
                           2. 相对定位是参照文档流中的位置定位
                           3. 相对定位会提升元素的层级
                           4. 相对定位不会使元素脱离文档流
                           5. 相对定位不会改变元素性质，块还是块，行内还是行内。
                 - 偏移量（offset）
                 - 当元素开启定位后，可以通过偏移量设置元素的位置
                    top
                         - 定位元素和定位位置上边的距离
                    bottom
                         - 定位元素和定位位置下边的距离
                         - 一般只用其中一个
                    right
                    left
          绝对定位：
               - 当元素的position属性设置为absolute时，则开启了元素的绝对定位
               - 绝对定位的特点：
                     1. 开启绝对定位后 ，如果不设置偏移量元素的位置不会发生变化
                     2. 开启绝对定位后，元素会从文档流中脱离
                     3. 绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开。
                     4. 绝对定位会使元素提升一个层级
                     5. 绝对定位元素相对于其包含块进行定位的

                     包含块（containing block）
                      - 正常情况下：
                          包含块就是离当前元素最近的祖先块元素
                      - 绝对定位的包含块：
                          包含块就是离他最近的开启了定位的祖先元素（祖先元素不是static）
                          如果所有的祖先元素都没开启定位，则根元素就是他的包含块
                      - html（根元素 初始包含块）
 
 
           固定定位：
                - 将元素的position属性设置为fixed则开启
                - 固定定位也是一种绝对定位，所以固定定位大部分特点与绝对定位一样
                    唯一不同的是 固定定位永远参考浏览器的视口进行定位
                    固定定位元素不会随着网页滚动条滚动
           粘滞定位：
                - 当元素的position属性设置为sticky，则开启了元素的粘滞定位
                - 粘滞定位与相对定位类似，不同的是粘滞定位 可以让元素到达某个位置时固定不动。



            top:0;
            bottom:0;
            left: 0;
            right:0;
            position:absolute;
            可以水平/垂直居中。
当我们开启绝对定位后：
                 水平方向的布局等式需要添加 left 和 right 两个值
                    此时规则和之前一样 只是添加了两个值
                       当发生过度约束：
                          如果没有auto 自动调整right值使等式满足
                          如果有auto 则自动调整auto值。
                         - 可设置auto值
                               margin width left right
                         - 若 margin-left和margin-right 值都是auto ，同时不知道right与left值
                             则等式会自动调节这两个值（left和right两个值默认为auto）
                 垂直方向布局的等式也必须要满足
                      top + margin-top/bottom + padding-top/bottom + border-top/bottom +bottom

对于开启了定位元素 可以通过z-index属性指定元素的层级
               z-index需要一个整数作为参数，值越大元素的层级越高
                   元素的层级越高越优先显示
               如果元素层级一样，则优先选择靠下的。
               祖先元素的层级再高，也不会盖住后代元素。

字体相关的样式：
            color 用来设置字体颜色
            font-size 字体的大小
                和 font-size相关的单位
                 - em 相当于当前元素的一个font-size
                 - rem 相对于根元素的一个font-szie
            font-family 字体族（字体的格式）
                可选值：
                   - serif：衬线字体
                   - sans-serif：非衬线字体
                   - monospace：等宽字体
                        - 指定字体的类别 浏览器会自动使用该类别下的字体
    @font-face 可以将服务器中的字体直接提供给用户使用
         {
             font-family：‘xx’ ：指定字体的名字
             src：url（）；服务器中字体的路径
         }


图标字体（iconfont）：
           - 网页中经常需要使用一些图标，可以通过图片来引入图标
                但是图片大小本身比较大 并且非常不灵活
           - 所以在使用图标时 还是可将图标设置为字体
              再通过font-face形式对字体进行引入
           - 最后就可通过使用字体形式来使用图标
		   
		  使用图标字体
		      - 直接通过类名使用图标字体
			      class = ‘xx(fas/fab) xx.’  xx xx指图标表示
				  
通过伪元素设置图标字体
             1.- 找到设置图标元素通过before/after
             - 在content中设置编码
             - 设置字体样式
                fab（font-family:'Font Awesome 5 Brands'）
                fas (font-family:'Font Awesome 5 Free' font-weight:900)
             2. - 通过实体使用图标字体
                &#x图标的编码（<i class = 'fab'>&#xfof3</i>）
             3. <i class = 'fab fa-location-arrow'></i>
			 
			 
行高(line height)
            - 行高指文字占有的实际高度
            - 可以通过line-height来设置行高
                行高可以直接指定一个大小（px em）
                也可以直接为行高设置一个整数
            - 行高还经常用来设置文字的行间距
                  如果是一个整数的话，行高回是其一定的倍数
字体框
            - 字体框是字体存在的格子，设置font-size实际上就是在设置字体框高度
        
            -行高会在字体框的大小平均分配
         -可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中
		 
font 可以设置字体相关的所有属性
               语法： 
                   font：（italic bold）字体大小/行高 字体族
                   行高可以省略不写 不写则使用默认值
font-weight 设置字体加粗
              可选值：
                  normal/bold
font-style 字体风格
              可选值:
                   normal/italic

text-align 文本的水平对齐
              可选值：
                  left 左侧对齐
                  right 右侧对齐
                  center 居中对齐
                  justify 两端对齐
vertical-align 文本的垂直对齐
               可选值:
                  baseline 默认值 基线对齐
                  top 顶部对齐(可以消除 图片基线影响 造成的空白)
                  bottom 底部对齐
                  middle 居中对齐(差评)
				  
text-derocation 设置文本修饰
            可选值：(underline （red dotted）)
                 - none 什么都没有
                 - underline 下划线
                 - line-through 删除线
                 - overline 上划线

          white-space 设置网页如何处理空白
            可选值：
                 - noraml 正常
                 - nowrap 不换行
                 - pre 保留空白
          text-overflow:elipsis 将多余部分设为省略号
          如 .box2{
              white-space:nowrap;
              overflow:hidden;
              text-overflow:ellipsis;
          }
		  
		  
background-image 设置背景图片
             background-image:url('')
             - 可以同时设置背景图片和背景颜色 这样背景颜色会称为图片的背景色
             - 如果背景的图片大于元素，则一部分背景无法显示
             - 如果背景的图片小于元素，则背景图片会在元素内铺满
             - 一样大 正常显示
background-repeat 用来设置背景的重复方式
             可选值
                repeat 默认值 -沿x，y轴双方向重复
                repeat-x 沿x轴方向重复
                repeat-y 沿y轴方向重复
                no-repeat 背景图片不重复
background-position 用来设置背景图片
             设置方式：
                 通过top left right bottom center 几个方位词组合设置移动
                   使用方位词必须同时指定两个值 ，如果只写一个，第二个默认
                 通过偏移量指定图片位置
                   水平方向的偏移量 垂直方向变量
background-clip 设置背景范围
           可选值:
               - border-box 默认值 背景会出现在边框的下边
               - padding-box 背景不出现 在边框 只出现在内容区和内边距
               - content-box 背景只会出现在内容区 
background-origin 背景图片的偏移量计算的原点
               - padding-box 默认值，background-position从内边距出开始计算
               - content-box 背景图片的偏移量从内容区计算
               - border-box  背景图片的偏移量从边框处开始计算
background-size 设置背景图片大小
            第一个值表示宽度 第二值为高度
              - 如果只写一个 则第二个值默认auto
              - background-size：cover；图片比例不变，将元素铺满
              - background-size：contain 图片比较不变。将图片完整显示
background-attachment 背景图片是否跟随元素移动
              - 可选值：
              - scroll 默认值 跟随移动
              - fixed 背景元素固定在页面中。不会随着元素移动
background 背景相关所有属性
  注意：
       - background-size必须写在background-position后面，并且用/隔开
	        background-position/background-size
	   - background-origin background-clip 两个样式 origin必须在clip前边

线性渐变 颜色沿着一条直线发生变化
linear-gradient（（to right，）red，yellow，#bfa）
             - 红色在开头 黄色在结尾 中间使过渡区
             - xx deg deg表示度数（1（0.25）turn（圈））
             - 渐变可以同时指定多个颜色 多个颜色默认情况下评级分布
                也可以手动指定渐变的分布情况
                （red 50px , yellow）
                  指从50px开始渐变
            background-image:repeating-linear-gradient(red 60px,yellow 100px)
                  可以将渐变重复
径向渐变：background-image:radial-gradient(大小 at 位置，颜色 位置，颜色 位置，。。。。)
               默认情况下，径向渐变形状根据元素形状计算
               长方形 -- >椭圆
               正方形 -- >圆形
               - 我们也可以手动指定径向渐变的大小
               circle，ellipse
               - 也可以指定渐变的位置 
                 background-image:radial-gradient(at center color,color)
               - 大小可选值：
                     circle ellipse closest-side（corner）
                     farthest-side（corner）远边（远角）
               - 位置可选值：top bottom left right center
		
--------------------------------------------------------------------------------------------------------------

在html中可以用table标签创建表格
           在table中可以用tr表示一行，几个tr几个行
             在tr中可以用td表示一个表格，几个td几个格子
           colspan 横向合并表格
           rowspan 纵向合并表格
		   
可以将一个表格分成三部分
            头部 thead
            主体 tbody
            底部 tfoot
            th 表示头部单元格	   
border-spaceing: 指定边框间的距离
border-collapse：collapse设置边框的合并
        如果表格中没有使用tbody而是直接使用tr
            那么浏览器会自动创建一个tbody，并且将tr全放到其中
            tr不是table1的子元素
默认情况下元素在td中垂直居中 可以通过设置vertical-align
display:table-cell 将元素设置成单元格
        td是行内元素 但可以当成块元素用
 .outer{
            width: 200px;
            height: 200px;
            background-color: cyan;
            vertical-align: middle;
            display: table-cell;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #bfa;
            margin: 0 auto;
        }  - -设置子元素居中。
		
表单，
           - 在现实生活中表单用于提交数据
           - 在网页中也可以使用表单，用于将本地数据提交给远程服务器
           - 使用form标签创建表单
form的属性<form action = ''>
           action 表单要提交的服务器地址
        <input type='text' name= ''> 出现文本框
        注意：数据要提交到服务器中，必须为元素指定一个name
        <input type= 'submit (value = '')> 提交按钮
        <input type = 'password' name = 'password'> 密码框
        <input type = 'submit' value = 'zhuce'>
单选按钮 <input type = 'radio' name = ''>*2 name必须相同
           - 像这种选择框 必须要指定value属性，value属性最终作为用户填写的值
              如<input type = 'radio' name = 'hello' value = 'a'>
               <input type = 'radio'  name = 'hello' value = 'b' checked>
                  check可以将单选按钮设置为默认选中
多选框 <input type = 'checkbox' name = 'test' value ='1'>
                <input type = 'checkbox' name = 'test' value ='2' checked>
下拉列表 <select name = ''> 
        <option value = ''></option>
         <option (selected) value = ''></option>
        <option value = ''></option>
        </select>

<input type = 'submit' 提交按钮>
<input type = 'button' 普通按钮>
<input type = 'reset'  重置按钮>
<button type = 'submit' 提交按钮></button>
<button type = 'button' 普通按钮></button>
<button type = 'reset'  重置按钮></button>
            差别不是自结束标签，可以实现更高级功能
<input type = 'color'> 出现调色板
<input type = 'email'> 提交邮箱并检查
                autocomplete= 'off' 关闭自动补全
                readonly  将表单项设置为只读，只读数据会提交
                disabled  将表单项设置为禁用，数据不会提交
                autofocus 设置表单项自动获取焦点	

transition:height 3s;  花费3s 。用于为样式设置过渡效果
text-indent  隐藏文字。（首行缩进）
<link rel = 'icon' href = ''>   设置网站的图标
    - 网站图片一般都存储在网站的根目录下，名字一般都叫做  favicon.ico
	

过渡(transition)(可同时设置所有相关属性)
         - 通过过渡可以指定一个属性变化发生时的切换方式
         - 通过过渡可以创建好的效果。
transition-property  
         - 指定执行过渡的属性，多个属性用逗号隔开，也可用all。
         - 过度时必须时一个有效数值向另一个有效过渡。
transition-duration  
         - 指定过渡效果的持续时间
transition-timing-function
         - 过渡的时序函数
         - 可选值
              - ease 默认值 慢速开始 先加后减
              - linear 保持匀速
              - ease-in 加速运动 
              - ease-out 减速运动
              - ease-in-out 先加后减
              - cubic-bezier()来指定时许函数
                   https://cubic-bezier.com
              - steps()分布执行过渡效果
                可以设置一个第二个值
                    end,   在时间结束时执行过渡（默认）
                    start， 在时间开始执行过渡
transition-delay
          - 过渡效果的延迟 ， 等待一段时间后再执行




@keyframes test{
        动画开始的位置
        from{
            margin-left：0%；
        }
        动画结束的位置
        to{
           margin-left：100%：
        }
    }
        对当前元素生效的关键帧名字
        animation-name:test;
        
        animation-iteration-count 动画执行的次数（infinite）
        animation-direction 指定动画运行方向
          可选值-  
                 - 默认值 normal 从 from 到 to
                 - reverse 从 to 到 from
                 - alternate 从from到to 重复时动画反向执行
                 - alternate-reverse 从to到from 重复运行动画时反向执行
        animation-play-state 设置动画执行状态
           可选值-
                  - running 默认值 动画执行
                  - paused 动画暂停
        animation-fill-mode 动画的填充模型
            可选值-
                   - none 默认值 动画执行完毕 回到原位置
                   - fowards 动画执行完毕 停在动画结束位置
                   - backwards 动画延时等待时 元素就会处于开始位置
                   - both 结合了forwards 和 backwards 延时  
animation 可以写所有。	

变形就是通过css来改变元素的形状和位置
              - 变形不会影响页面的布局
              - transform 用来设置元素的变形效果
                  - 平移
                      translateX() 沿x轴方向平移，其它类似。
                         -平移元素 百分比相对于自身大小计算
                    left:50% + translate(-50%)使其水平居中
通过旋转使元素沿着 x y 或 z旋转指定的角度
              rotateX（）等
            transfrom：rotateZ（）
perspectvie  设置人离网页距离
			   

z轴平移 调整元素在z轴的位置 正常情况下就是调整元素和人眼之间的距离
            距离越大 元素离人越近
z轴平移属于立体效果（近大远小） 默认情况 网页不支持透视 如果需要看见效果
            必须设置网页视距	

backface-visibility:hidden(隐藏背面)			
transform-style:preserver-3d 设置3d变形效果
/*为元素设置透明效果*/
opacity: 0.7;

对元素进行缩放的函数
    - scaleX() scaleY sacle()双方向放大 如(transform:sacleX(2))
	 
transform-oringin: - 指定变形原点


-----------------------------------------------------------------------------------------------------------------
css原生也支持变量的设置 如 --color:#bfa  
less是一门css的预处理语言
            - less为css增强版 
            - 语法大体与css一致 无法执行，需将其预编译
			
//less中的单行注释
/*
    css中的注释，内容会被解释到css中。
*/
/*
   //变量的语法 -@变量名 如@a：100px
      -使用变量时， 直接使用 以@变量名形式
      -作为类名使用，或者一部份值使用时必须以 @{变量名}形式
    //& 为外层的元素
    //extend（）对当前选择器扩展指定选择器的样式
       如：.p1{
    width: 100px;
    height: 100px;}
      .p2:extend(.p1){
      color: red;}
    //直接对指定的样式进行引用 相当于将p1样式在这里进行复制
       如 .p3{.p1();}  这里p1就是被引用
    //混合函数 在混合函数中可以直接设置变量 如
          .test(@w){ width:@w ; height:100px}
          div { .test(100px)}
    // darken(颜色，百分值) 加深颜色
    // less中所有数值都可以进行直接运算 + — *
    // import 将别的less文件引入 
	
--------------------------------------------------------------------------------------------------------------------
flex 弹性盒
            - 是css中的一种布局手段 主要用来代替浮动来完成页面布局
            - flex 可以使元素具有弹性 让元素跟随页面大小改变而改变
            - 弹性容器
                - 使用弹性盒 必须将容易设为弹性容器
                - 通过设置dispaly
                   - display:flex 设置为块级弹性容器
                   - display:inline-flex 设置为行内弹性容器
                - 弹性元素
                    - 弹性容器的子元素是弹性元素 （弹性项）
                    - 一个元素可以是弹性容器也可以是弹性元素
flex-direction 指定容器中弹性元素的排列方式
           可选值
                - row 默认值 弹性元素在容器中水平排列（向右）
                - row-reverse 自右向左排列
                - column 弹性元素纵向排列 自上往下
                - column-reverse  与上相反
            主轴 - 弹性元素的排列方向叫主轴
            侧轴 - 与主轴垂直方向称为侧轴
弹性元素的属性
             - flex-grow 指定弹性元素伸展的系数 当父元素有多余空间 子元素如何伸展。
                 - 默认值 0
                 - 父元素剩余空间 按比列进行分配
             - flex-shrink 指定弹性元素收缩系数
                 - 当父元素中空间不足以容纳所有子元素时，对子元素收缩 
	弹性容器：			 
            flex-wrap:    
                设置弹性元素是否在弹性容器中自动换行
                可选值
                    - nowrap 默认值 不会
                    - wrap 元素沿着辅轴自动换行
                    - wrap-reverse 元素沿着辅轴反方向换    
            justify-content：
                如何分配主轴上的空白空间（主轴上的元素如何排列）
                可选值
                    - flex-start 元素沿着主轴起边排列
                    - flex-end 沿着主轴中终边排列
                    - center 元素居中排列（可以设置元素水平居中）
                    - space-around 空白分布到元素两侧
                    - space-between 空白均匀分布到元素间
                    - spac-evenly 空白分布到元素单侧
            align-items
                - 元素在辅轴上如何对齐
                - 元素间关系
                    - 可选值：
                        strench 默认值：将元素长度设置为相同值（指的是同一行的元素高度）
                        flex-start 元素不拉伸 沿着辅轴起边对齐
                        flex-end 沿着终边对齐
                        center 居中对齐
                        baseline 基线对齐
            align-content
                - 辅轴空白空间分布
                值与justify-content类似
	弹性元素：			
            align-self 用来覆盖当前弹性元素上的align-items
			            align-self 用来覆盖当前弹性元素上的align-items
            flex-grow  弹性元素的增长系数
            flex-shrink 弹性元素的缩减系数
                          -缩减多少根据 缩小系数 元素大小 计算
						  
---------------------------------------------------------------------------
像素
            - 默认情况下 一个css像素 = 一个物理像素
			- 可以查看视口大小 观察css像素和物理像素比值
			
            flex-basis  元素基础长度 指定元素在主轴上基础长度
                          -默认值 auto
                          -如果传递了具体数值 以其为准
            flex 增长 缩减 基础
                          -默认值 initial（0 1 auto）
            order 绝对弹性元素排列顺序（如 order 1）

vw （viewport width）视口的宽度
             100vw = 一个视口宽度
			 1vw = 1%vw宽度
 rem         1rem = 1 html字体大小
 
 
--------------------------------------------------------------------------------
响应式布局：
               - 网页可以根据不同设备和窗口大小 呈现不同大小
               - 使用响应式布局，可以使一个网页适用于所有设备
               - 关键 就是 媒体查询
               - 通过媒体查询 可以为不同设备或不同设备状态 来分别设置样式
        使用媒体查询
            语法： @media 查询规则{}
              媒体类型：
                  - all 所有设备
                  - print 打印设备
                  - screen 带屏幕设备
                  - speech 屏幕阅读器
        媒体特性：
            - width 视口宽度
            - heigh 视口高度
            - min-width 视口的最小宽度（视口大于指定宽度时生效）
            - max-width 视口的最大宽度（视口小于指定宽度生效）
        样式切换的分界点 我们称其为断点 也是网页发生变化的点
        比较常用断点 
           - 小于768 超小屏幕 max-width=768px
           - 大小768 小屏幕 min-width=768px
           - 大于992 中型屏幕 min-width=992px
           - 大于1200 大屏幕 min-width=1200px
		   
响应式设计的网页
            - 移动端优先
            - 渐进增强
